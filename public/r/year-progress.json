{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "year-progress",
  "type": "registry:component",
  "title": "Year Progress",
  "author": "Sahi Fruitwala",
  "description": "A year progress component",
  "registryDependencies": [
    "card"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/year-progress/year-progress.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Card } from \"@/registry/new-york/ui/card\";\n\ninterface TimeRemaining {\n    days: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    totalSeconds: number;\n}\n\ninterface YearProgressProps {\n    className?: string;\n    showHeader?: boolean;\n    showCountDown?: boolean;\n    showProgress?: boolean;\n    showDaysRemaining?: boolean;\n}\n\nexport function YearProgress({\n    className = \"\",\n    showHeader = true,\n    showCountDown = true,\n    showProgress = true,\n    showDaysRemaining = true,\n}: YearProgressProps) {\n    const [timeRemaining, setTimeRemaining] = useState<TimeRemaining | null>(\n        null\n    );\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    const calculateTimeRemaining = (): TimeRemaining => {\n        try {\n            const now = new Date();\n            const currentYear = now.getFullYear();\n            const newYear = new Date(currentYear + 1, 0, 1, 0, 0, 0);\n\n            const difference = newYear.getTime() - now.getTime();\n\n            if (difference <= 0) {\n                // Handle year transition\n                const nextYear = new Date(currentYear + 2, 0, 1, 0, 0, 0);\n                const nextDifference = nextYear.getTime() - now.getTime();\n\n                return {\n                    days: Math.floor(nextDifference / (1000 * 60 * 60 * 24)),\n                    hours: Math.floor(\n                        (nextDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n                    ),\n                    minutes: Math.floor(\n                        (nextDifference % (1000 * 60 * 60)) / (1000 * 60)\n                    ),\n                    seconds: Math.floor((nextDifference % (1000 * 60)) / 1000),\n                    totalSeconds: Math.floor(nextDifference / 1000),\n                };\n            }\n\n            return {\n                days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n                hours: Math.floor(\n                    (difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n                ),\n                minutes: Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60)),\n                seconds: Math.floor((difference % (1000 * 60)) / 1000),\n                totalSeconds: Math.floor(difference / 1000),\n            };\n        } catch (err) {\n            throw new Error(\"Failed to calculate time remaining\");\n        }\n    };\n\n    const getTargetYear = (): number => {\n        const now = new Date();\n        const currentYear = now.getFullYear();\n        const newYear = new Date(currentYear + 1, 0, 1, 0, 0, 0);\n\n        return newYear.getTime() - now.getTime() <= 0\n            ? currentYear + 2\n            : currentYear + 1;\n    };\n\n    useEffect(() => {\n        const updateCountdown = () => {\n            try {\n                const remaining = calculateTimeRemaining();\n                setTimeRemaining(remaining);\n                setError(null);\n            } catch (err) {\n                setError(err instanceof Error ? err.message : \"An error occurred\");\n            }\n        };\n\n        // Initial calculation\n        updateCountdown();\n        setIsLoaded(true);\n\n        // Update every second\n        const interval = setInterval(updateCountdown, 1000);\n\n        // Cleanup\n        return () => clearInterval(interval);\n    }, []);\n\n    if (error) {\n        return (\n            <Card className=\"border-red-200 bg-red-50 p-8 text-center dark:border-red-800 dark:bg-red-950\">\n                <div className=\"font-mono text-lg text-red-600 dark:text-red-400\">\n                    ERROR: {error}\n                </div>\n            </Card>\n        );\n    }\n\n    if (!isLoaded || !timeRemaining) {\n        return (\n            <Card className=\"countdown-card countdown-border border-2 p-8 text-center\">\n                <div className=\"countdown-primary countdown-pulse font-mono text-lg\">\n                    INITIALIZING COUNTDOWN...\n                </div>\n            </Card>\n        );\n    }\n\n    const targetYear = getTargetYear();\n    const progressPercentage = Math.max(\n        0,\n        100 - (timeRemaining.totalSeconds / (365 * 24 * 60 * 60)) * 100\n    );\n\n    return (\n        <div className={`space-y-6 ${className}`}>\n            {/* Header */}\n            {showHeader && (\n                <Card className=\"countdown-border border-2 bg-gradient-to-r from-orange-500 to-orange-600 p-6 shadow-lg dark:from-orange-600 dark:to-orange-700\">\n                    <h1 className=\"text-center font-mono text-2xl font-bold tracking-wider text-white drop-shadow-sm md:text-3xl\">\n                        COUNTDOWN TO {targetYear}\n                    </h1>\n                </Card>\n            )}\n\n            {/* Main Countdown Display */}\n            {showCountDown && (\n                <Card className=\"countdown-card countdown-border border-2 p-8 shadow-2xl\">\n                    <div className=\"grid grid-cols-2 gap-6 md:grid-cols-4 md:gap-8\">\n                        {[\n                            { value: timeRemaining.days, label: \"DAYS\" },\n                            { value: timeRemaining.hours, label: \"HOURS\" },\n                            { value: timeRemaining.minutes, label: \"MINUTES\" },\n                            { value: timeRemaining.seconds, label: \"SECONDS\" },\n                        ].map((item, index) => (\n                            <div key={item.label} className=\"text-center\">\n                                <div className=\"relative\">\n                                    <div className=\"countdown-primary countdown-glow mb-2 font-mono text-4xl font-bold transition-all duration-300 hover:scale-105 md:text-6xl\">\n                                        {item.value.toString().padStart(2, \"0\")}\n                                    </div>\n                                    <div className=\"countdown-text font-mono text-sm tracking-widest md:text-base\">\n                                        {item.label}\n                                    </div>\n                                    {/* Enhanced glow effect */}\n                                    <div className=\"countdown-secondary pointer-events-none absolute inset-0 font-mono text-4xl font-bold opacity-10 blur-sm md:text-6xl\">\n                                        {item.value.toString().padStart(2, \"0\")}\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </Card>\n            )}\n\n            {/* Progress Bar */}\n            {showProgress && (\n                <Card className=\"p-6 countdown-card border-2 countdown-border shadow-lg\">\n                    <div className=\"space-y-4\">\n                        <div className=\"flex justify-between items-center\">\n                            <span className=\"countdown-text font-mono text-sm\">\n                                YEAR PROGRESS\n                            </span>\n                            <span className=\"countdown-primary font-mono text-sm font-bold\">\n                                {progressPercentage.toFixed(1)}%\n                            </span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 dark:bg-gray-800 rounded-full h-4 overflow-hidden border-2 countdown-border\">\n                            <div\n                                className=\"h-full bg-gradient-to-r from-orange-500 to-orange-600 dark:from-orange-600 dark:to-orange-400 transition-all duration-500 ease-out relative\"\n                                style={{ width: `${progressPercentage}%` }}\n                            >\n                                <div className=\"absolute inset-0 bg-orange-300 dark:bg-orange-300 opacity-30 animate-pulse\"></div>\n                            </div>\n                        </div>\n                        <div className=\"text-center countdown-text font-mono text-xs\">\n                            TIME REMAINING UNTIL NEW YEAR\n                        </div>\n                    </div>\n                </Card>\n            )}\n\n            {/* Status Message */}\n            {showDaysRemaining && (\n                <Card className=\"countdown-card countdown-border border p-4 shadow-md\">\n                    <div className=\"countdown-text text-center font-mono text-sm\">\n                        {timeRemaining.totalSeconds > 86400\n                            ? `${Math.floor(\n                                timeRemaining.totalSeconds / 86400\n                            )} days remaining in ${new Date().getFullYear()}`\n                            : timeRemaining.totalSeconds > 3600\n                                ? `Less than 24 hours remaining in ${new Date().getFullYear()}!`\n                                : timeRemaining.totalSeconds > 60\n                                    ? `Final hour of ${new Date().getFullYear()}!`\n                                    : `Final minute of ${new Date().getFullYear()}!`}\n                    </div>\n                </Card>\n            )}\n        </div>\n    );\n}\n",
      "type": "registry:component"
    }
  ]
}